# Copyright (c) 2018, Red Hat, Inc.
# All Rights Reserved.
#
#    Licensed under the Apache License, Version 2.0 (the "License"); you may
#    not use this file except in compliance with the License. You may obtain
#    a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#    License for the specific language governing permissions and limitations
#    under the License.
#
#
---
# =============================================================================
# The example sets up a single node controller and consumer node with the LVM
# backend that uses a Volume Group created on a loop.
# Then creates a volume, attaches via iSCSI presenting the device that has been
# created, and finally disconnects and deletes the volume.
# =============================================================================

#------------------------------------------------------------------------------
# Setup an LVM VG that will be used as the "Storage backend"
# If we were using a real storage array this wouldn't be necessary
#------------------------------------------------------------------------------
- hosts: all
  vars:
    cldir: .
    vg: cinder-volumes
    ansible_become: yes
  tasks:
      - name: Create LVM backing file
        command: "truncate -s 10G {{vg}}"
        args:
            creates: "{{cldir}}/{{vg}}"

      - shell: "losetup -l | awk '/{{vg}}/ {print $1}'"
        changed_when: false
        register: existing_loop_device

      - name: "Create loopback device {{vg}}"
        command: "losetup --show -f {{cldir}}/{{vg}}"
        register: new_loop_device
        when: existing_loop_device.stdout == ''
       # Workaround because Ansible destroys registers when skipped
      - set_fact: loop_device="{{ new_loop_device.stdout if new_loop_device.changed else existing_loop_device.stdout }}"

      - name: "Create VG {{vg}}"
        shell: "vgcreate {{vg}} {{loop_device}} && touch {{cldir}}/lvm.vgcreate"
        args:
            creates: "{{cldir}}/lvm.vgcreate"

      - command: "vgscan --cache"
        changed_when: false

      - name: Install iSCSI package
        package:
          name: iscsi-initiator-utils
          state: present

      - name: Create initiator name
        shell: echo InitiatorName=`iscsi-iname` > /etc/iscsi/initiatorname.iscsi
        args:
            creates: /etc/iscsi/initiatorname.iscsi

      - name: Start iSCSI initiator
        service:
            name: iscsid
            state: started


#------------------------------------------------------------------------------
# Setup the controller storage role on a node to use the LVM VG and use the
# storage on the node.
#------------------------------------------------------------------------------
- hosts: all
  vars:
    ansible_become: yes
    storage_backends:
        lvm:
            volume_driver: 'cinder.volume.drivers.lvm.LVMVolumeDriver'
            volume_group: 'cinder-volumes'
            iscsi_protocol: 'iscsi'
            iscsi_helper: 'lioadm'

  roles:
      - {role: storage, node_type: controller}
      - {role: storage, node_type: consumer}

  tasks:
      - name: Get stats
        storage:
            resource: backend
            state: stats
        register: stats

      - debug:
            msg: "Backend {{stats.result.volume_backend_name}} from vendor {{stats.result.vendor_name}} uses protocol {{stats.result.storage_protocol}}"

      - name: Create volume
        storage:
            resource: volume
            state: present
            size: 1
        register: vol
      - debug:
          msg: "Volume {{vol.id}} with {{vol.size}}GB created on {{vol.host}}"

      - name: Connect volume
        storage:
            resource: volume
            state: connected
        register: conn
      - debug:
          msg: "Volume {{vol.id}} attached to {{conn.path}}"

      - name: Partition volume
        parted:
            device: "{{conn.path}}"
            flags: [ lvm ]
            number: 1
            state: present

      - command: "lsblk {{conn.path}}"
        register: blk_size
      - debug:
          msg: "The full block device size: {{ blk_size.stdout_lines[1].split()[3] }}"

      - name: Extending the volume
        storage:
            resource: volume
            state: extended
            size: 2
        register: extend

      - command: "lsblk {{conn.path}}"
        register: blk_size
      - debug:
          msg: "The full block device size: {{ blk_size.stdout_lines[1].split()[3] }} but the partition is still {{ blk_size.stdout_lines[2].split()[3] }}"

      - name: Grow the partition
        command: 'parted {{extend.device.path}} resizepart 1 100%'
      - command: "lsblk {{extend.device.path}}1"
        register: blk_size
      - debug:
          msg: "The partition size is now: {{ blk_size.stdout_lines[1].split()[3] }}"

      - name: Disconnect volume
        storage:
            resource: volume
            state: disconnected

      - name: Delete volume
        storage:
            resource: volume
            state: absent
