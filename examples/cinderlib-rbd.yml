# Copyright (c) 2018, Red Hat, Inc.
# All Rights Reserved.
#
#    Licensed under the Apache License, Version 2.0 (the "License"); you may
#    not use this file except in compliance with the License. You may obtain
#    a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#    License for the specific language governing permissions and limitations
#    under the License.
#
#
---
# Copy the configuration and keyring file, we can store them out of /etc/ceph
# but then we have to set "keyring" option in ceph.conf file.
- hosts: storage_controller
  tasks:
      - copy:
            src: ceph.conf
            dest: /etc/ceph/ceph.conf
            mode: 0644
            directory_mode: 0755
        become: yes
      - copy:
            src: ceph.client.cinder.keyring
            dest: /etc/ceph/ceph.client.cinder.keyring
            mode: 0600
            owner: vagrant
            group: vagrant
        become: yes

# Configure the Ceph backend on our controller node
- hosts: storage_controller
  vars:
    storage_backends:
        ceph:
            volume_driver: cinder.volume.drivers.rbd.RBDDriver
            rbd_user: cinder
            rbd_pool: volumes
            rbd_ceph_conf: /etc/ceph/ceph.conf
            # keyring conf location is necessary, or we won't be able to attach
            # from non controller nodes.
            rbd_keyring_conf: /etc/ceph/ceph.client.cinder.keyring
  roles:
      - { role: storage, node_type: controller }
  tasks:
      - name: Get stats
        storage:
            resource: backend
            state: stats
        register: stats

      - debug:
            msg: "Backend {{ stats.result.volume_backend_name }} from vendor {{ stats.result.vendor_name }} uses protocol {{ stats.result.storage_protocol }}"


- hosts: storage_consumers
  roles:
      - { role: storage, node_type: consumer }
  tasks:
      - name: Create volume
        storage:
            resource: volume
            state: present
            size: 1
        register: vol
      - debug:
          msg: "Volume {{vol.id}} with {{vol.size}}GB created on {{vol.host}}"

      - name: Connect only existing volume
        storage:
            resource: volume
            state: connected
        register: conn

      - debug:
          msg: "Volume {{ vol.id }} attached to {{ conn.path }}"

      - name: Disconnect only existing volume
        storage:
            resource: volume
            state: disconnected

      - name: Delete only existing volume
        storage:
            resource: volume
            state: absent
